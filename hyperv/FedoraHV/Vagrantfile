# -*- mode: ruby -*-
# vi: set ft=ruby :
# *Variables
box      = "generic/fedora36"
provider = "hyperv"
vm_name  = "FedoraHV"
# network configuration
nat_net  = "192.168.121.0/24"
ip_addr  = "192.168.121.88"
dns      = "9.9.9.9,149.112.112.112"
# vm configuration
memory   = 8192
cpu      = 4

# calculate variables
hostname = vm_name.downcase
switch_ip, prefix = nat_net.sub(/0(?=\/)/, "1").split("/")

# *Scripts
script_install_packages = <<-SCRIPT
dnf install -y \\
  @development-tools \\
  fedora-workstation-repositories \\
  dnf-plugins-core 'dnf-command(offline-upgrade)' \\
  bash-completion \\
  exa ripgrep openssl nano vim jq npm sassc
SCRIPT

script_configure_static_ip = <<-SCRIPT
nmcli connection modify eth0 \\
  ipv4.method manual \\
  ipv4.addresses #{ip_addr}/#{prefix} \\
  ipv4.gateway #{switch_ip} \\
  ipv4.dns #{dns}
SCRIPT

# *VM provisioning
Vagrant.configure("2") do |config|

  config.trigger.before :up do |trigger|
    trigger.info = "Creating 'NATSwitch' Hyper-V switch if it does not exist..."
    trigger.run = {
      privileged: "true",
      powershell_elevated_interactive: "true",
      path: "../../.assets/trigger/create_hyperv_natswitch.ps1", :args => [nat_net, vm_name]
    }
  end
  config.trigger.before :reload do |trigger|
    trigger.info = "Setting Hyper-V switch to 'NATSwitch' to allow for static IP..."
    trigger.run = {
      privileged: "true",
      powershell_elevated_interactive: "true",
      path: "../../.assets/trigger/set_hyperv_switch.ps1", :args => [vm_name]
    }
  end
  config.trigger.after :reload do |trigger|
    trigger.info = "Add vagrant configuration to ssh config file..."
    trigger.run = {
      privileged: "false",
      powershell_elevated_interactive: "false",
      path: "../../.assets/trigger/set_ssh_config.ps1", :args => [ip_addr, hostname]
    }
  end

  config.vm.box = box
  config.vm.provider provider
  # timeout setup to overcome security tool related performance impact
  config.vm.boot_timeout = 600
  config.vm.graceful_halt_timeout = 600

  config.vm.hostname = hostname
  config.vm.network "public_network"
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.provision "file", source: "~/.ssh/id_rsa.pub", destination: "~/.ssh/authorized_keys"
  config.ssh.private_key_path = ["~/.ssh/id_rsa", "~/.vagrant.d/insecure_private_key"]
  config.ssh.insert_key = false

  config.vm.define vm_name do |node|
    node.vm.provider provider do |h|
      h.enable_virtualization_extensions = true
      h.linked_clone = true
      h.memory = memory
      h.maxmemory = memory
      h.cpus = cpu
      h.vmname = vm_name
    end
    # install packages
    node.vm.provision "shell", name: "install packages...", inline: script_install_packages
    node.vm.provision "shell", name: "install bat...", path: "../../.assets/provision/install_bat.sh"
    node.vm.provision "shell", name: "install yq", path: "../../.assets/provision/install_yq.sh"
    node.vm.provision "shell", name: "install docker...", path: "../../.assets/provision/install_docker.sh"
    node.vm.provision "shell", name: "set ulimits on systemd", path: "../../.assets/provision/set_ulimits.sh"
    node.vm.provision "shell", name: "install kubectl...", path: "../../.assets/provision/install_kubectl.sh"
    node.vm.provision "shell", name: "install helm...", path: "../../.assets/provision/install_helm.sh", privileged: false
    node.vm.provision "shell", name: "install minikube...", path: "../../.assets/provision/install_minikube.sh"
    node.vm.provision "shell", name: "install k3d...", path: "../../.assets/provision/install_k3d.sh"
    node.vm.provision "shell", name: "install k9s...", path: "../../.assets/provision/install_k9s.sh"
    node.vm.provision "shell", name: "install flux", path: "../../.assets/provision/install_flux.sh"
    node.vm.provision "shell", name: "install smee", path: "../../.assets/provision/install_smee.sh"
    node.vm.provision "shell", name: "install kubeseal", path: "../../.assets/provision/install_kubeseal.sh"
    node.vm.provision "shell", name: "install kustomize", path: "../../.assets/provision/install_kustomize.sh"
    node.vm.provision "shell", name: "install argo-rollouts cli", path: "../../.assets/provision/install_argorolloutscli.sh"
    node.vm.provision "shell", name: "install Gnome...", path: "../../.assets/provision/install_gnome.sh"
    node.vm.provision "shell", name: "set up Gnome...", path: "../../.assets/provision/setup_gnome.sh", privileged: false
    node.vm.provision "shell", name: "install Edge...", path: "../../.assets/provision/install_edge.sh"
    node.vm.provision "shell", name: "install xrdp...", path: "../../.assets/provision/install_xrdp.sh"
    # # ~setting up profiles
    node.vm.provision "shell", name: "install oh-my-posh...", path: "../../.assets/provision/install_omp.sh"
    node.vm.provision "shell", name: "install PowerShell...", path: "../../.assets/provision/install_pwsh.sh"
    node.vm.provision "file", source: "../../.assets/config", destination: "/tmp/"
    node.vm.provision "shell", name: "set up PS for all users...", path: "../../.assets/provision/setup_profiles_allusers.sh"
    node.vm.provision "shell", name: "set up user profile...", path: "../../.assets/provision/setup_profiles_user.sh", privileged: false
    # ~upgrade system
    node.vm.provision "shell", name: "upgrade system...", path: "../../.assets/provision/upgrade_system.sh"
    # ~set static ip and reload
    node.vm.provision "shell", name: "configure static ip", inline: script_configure_static_ip
    node.vm.provision :reload
  end
end
