# -*- mode: ruby -*-
# vi: set ft=ruby :
# *Variables
box       = 'generic/fedora36'
provider  = 'hyperv'
vm_name   = 'FedoraHV'
# network configuration
nat_net   = '192.168.121.0/24'
ip_addr   = '192.168.121.88'
dns       = '9.9.9.9,149.112.112.112'
# vm configuration
memory    = 8192
cpu       = 4
# vagrant data folder location
vagrant_home = '~/vagrant.d'
# calculate variables
hostname  = vm_name.downcase
switch_ip, prefix = nat_net.sub(/0(?=\/)/, '1').split('/')

# *Scripts
script_configure_static_ip = <<-SCRIPT
nmcli con mod eth0 ipv4.addresses #{ip_addr}/#{prefix}
nmcli con mod eth0 ipv4.gateway #{switch_ip}
nmcli con mod eth0 ipv4.dns #{dns}
nmcli con mod eth0 ipv4.method manual
SCRIPT

script_upgrade_packages = <<-SCRIPT
dnf upgrade -y
SCRIPT

script_install_packages = <<-SCRIPT
dnf install -y \\
  @development-tools \\
  bash-completion \\
  openssl jq sassc
SCRIPT

script_omp = <<-SCRIPT
REL=$(curl -sk https://api.github.com/repos/JanDeDobbeleer/oh-my-posh/releases/latest | grep -Po '"tag_name": *"v\\K.*?(?=")')
if type oh-my-posh &>/dev/null; then
  OMP_VER=$(oh-my-posh version)
  if [ "$REL" == "$OMP_VER" ]; then
    echo "The latest oh-my-posh v$REL is already installed!"
    exit 0
  fi
fi
echo "Install oh-my-posh v$REL"
curl -Lk https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -o /usr/local/bin/oh-my-posh
chmod +x /usr/local/bin/oh-my-posh
SCRIPT

script_pwsh = <<-SCRIPT
REL=$(curl -sk https://api.github.com/repos/PowerShell/PowerShell/releases/latest | grep -Po '"tag_name": *"v\\K.*?(?=")')
if type pwsh &>/dev/null; then
  PWSH_VER=$(pwsh -nop -c '$PSVersionTable.PSVersion.ToString()')
  if [ "$REL" == "$PWSH_VER" ]; then
    echo "The latest PowerShell v$REL is already installed!"
    exit 0
  fi
fi
echo "Install PowerShell v$REL"
dnf install -y https://github.com/PowerShell/PowerShell/releases/download/v$REL/powershell-$REL-1.rh.x86_64.rpm
SCRIPT

script_pwsh_modules = <<-SCRIPT
pwsh -nop -c 'Write-Host "Install PowerShellGet" && Install-Module PowerShellGet -AllowPrerelease -Scope AllUsers -Force -WarningAction SilentlyContinue'
cat <<'EOF' | pwsh -nop -c -
Write-Host 'Set PSGallery Trusted' && Set-PSResourceRepository -Name PSGallery -Trusted;
Write-Host 'Install PSReadLine' && Install-PSResource -Name PSReadLine -Scope AllUsers -Quiet -WarningAction SilentlyContinue;
Write-Host 'Install posh-git' && Install-PSResource -Name posh-git -Scope AllUsers -Quiet -WarningAction SilentlyContinue;
Write-Host 'Enable PSAnsiRenderingFileInfo' && Enable-ExperimentalFeature PSAnsiRenderingFileInfo -WarningAction SilentlyContinue
EOF
type kubectl &>/dev/null && pwsh -nop -c '(kubectl completion powershell).Replace("''kubectl''", "''k''") > $PROFILE' || true
SCRIPT

script_user_profile = <<-SCRIPT
pwsh -nop -c 'Enable-ExperimentalFeature PSAnsiRenderingFileInfo -WarningAction SilentlyContinue'
type kubectl &>/dev/null && pwsh -nop -c '(kubectl completion powershell).Replace("''kubectl''", "''k''") > $PROFILE' || true
cat <<'EOF' >> ~/.bashrc
# initialize oh-my-posh prompt
if type oh-my-posh &>/dev/null; then
  [ -f /etc/profile.d/theme.omp.json ] && eval "$(oh-my-posh --init --shell bash --config /etc/profile.d/theme.omp.json)"
fi
EOF
SCRIPT

script_docker = <<-SCRIPT
dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
dnf install -y docker-ce docker-ce-cli containerd.io
usermod -a -G docker vagrant
systemctl enable --now docker.service
systemctl enable --now containerd.service
SCRIPT

script_kubectl = <<-SCRIPT
[ -f /etc/yum.repos.d/kubernetes.repo ] || cat <<EOF | tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
if type kubectl &>/dev/null; then
  dnf update -y kubectl
else
  dnf install -y kubectl
fi
SCRIPT

# set systemd ulimits
script_ulimits = <<-SCRIPT
cat << EOF > /etc/security/limits.d/k8slimits.conf
* soft nofile 120000
* hard nofile 524288
root soft nofile 120000
root hard nofile 524288
EOF
sed -i "s/^.*DefaultLimitNOFILE.*$/DefaultLimitNOFILE=120000\:524288/" /etc/systemd/user.conf
sed -i "s/^.*DefaultLimitNOFILE.*$/DefaultLimitNOFILE=120000\:524288/" /etc/systemd/system.conf
SCRIPT

# set new ulimit trigger
script_inotify = <<-SCRIPT
sysctl -w fs.inotify.max_user_instances=1280 >/etc/sysctl.d/99-custom-inotify.conf
sysctl -w fs.inotify.max_user_watches=655360 >>/etc/sysctl.d/99-custom-inotify.conf
sysctl -p /etc/sysctl.d/99-custom-inotify.conf
SCRIPT

# install smee
script_smee = <<-SCRIPT
  npm install -g smee-client
SCRIPT

# install argo-rollouts cli
script_argorolloutscli = <<-SCRIPT
curl -LOk "https://github.com/argoproj/argo-rollouts/releases/download/v1.2.1/kubectl-argo-rollouts-linux-amd64"
install -o root -g root -m 0755 kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
SCRIPT

# install flux-cli
script_flux = <<-SCRIPT
  curl -sk https://fluxcd.io/install.sh > install.sh
  bash install.sh
SCRIPT

# install kubeseal
script_kubeseal = <<-SCRIPT
wget https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.17.5/kubeseal-0.17.5-linux-amd64.tar.gz -O - | tar xz
install -m 755 kubeseal /usr/local/bin/kubeseal
SCRIPT

# install yq
script_yq = <<-SCRIPT
REL=$(curl -sk https://api.github.com/repos/mikefarah/yq/releases/latest | grep -Po '"tag_name": *"v\\K.*?(?=")')
wget https://github.com/mikefarah/yq/releases/download/v${REL}/yq_linux_amd64.tar.gz -O - | tar xz
mv yq_linux_amd64 yq
install -m 755 yq /usr/local/bin/yq
rm yq yq.1 install-man-page.sh
SCRIPT

# install latest kustomize
script_kustomize = <<-SCRIPT
curl -fsSLk -o ./install_kustomize.sh "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"
chmod 700 ./install_kustomize.sh
rm -f /usr/local/bin/kustomize
./install_kustomize.sh
install ./kustomize /usr/local/bin
# ./install_kustomize.sh "4.1.3" "/usr/local/bin"
SCRIPT

script_helm = <<-SCRIPT
curl -fsSLk -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh && rm -f get_helm.sh
SCRIPT

script_minikube = <<-SCRIPT
dnf install -y https://storage.googleapis.com/minikube/releases/latest/minikube-latest.x86_64.rpm
SCRIPT

script_k3d = <<-SCRIPT
curl -sk https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
SCRIPT

script_k9s = <<-SCRIPT
REL=$(curl -sk "https://api.github.com/repos/derailed/k9s/releases/latest" | grep -Po '"tag_name": *"v\\K.*?(?=")')
curl -sLOk --output-dir /tmp "https://github.com/derailed/k9s/releases/download/v${REL}/k9s_Linux_x86_64.tar.gz"
mkdir -p /opt/k9s
tar zxf /tmp/k9s_Linux_x86_64.tar.gz -C /opt/k9s && rm -f /tmp/k9s_Linux_x86_64.tar.gz
ln -s /opt/k9s/k9s /usr/bin/k9s
SCRIPT

script_global_profile_setup = <<-SCRIPT
mv -f /tmp/.config/bash_profile.sh /etc/profile.d/
mv -f /tmp/.config/bash_aliases.sh /etc/profile.d/
mv -f /tmp/.config/kubectl_aliases /etc/profile.d/
mv -f /tmp/.config/theme.omp.json /etc/profile.d/
mv -f /tmp/.config/profile.ps1 /opt/microsoft/powershell/7/
mv -f /tmp/.config/kubectl_functions.ps1 /opt/microsoft/powershell/7/
rm -fr /tmp/.config
SCRIPT

script_gnome = <<-SCRIPT
dnf group install -y gnome-desktop
dnf install -y gnome-tweaks gnome-extensions-app
systemctl set-default graphical.target
SCRIPT

script_setup_gnome = <<-SCRIPT
# install dash-to-dock
git clone https://github.com/micheleg/dash-to-dock.git
make -C dash-to-dock install && rm -fr dash-to-dock
# button-layout
gsettings set org.gnome.desktop.wm.preferences button-layout ":minimize,close"
# keyboard repat and delay settings
gsettings set org.gnome.desktop.peripherals.keyboard repeat-interval 24
gsettings set org.gnome.desktop.peripherals.keyboard delay 250
# disable desktop screen lock
gsettings set org.gnome.desktop.session idle-delay 0
SCRIPT

script_edge = <<-SCRIPT
rpm --import https://packages.microsoft.com/keys/microsoft.asc
dnf config-manager --add-repo https://packages.microsoft.com/yumrepos/edge
mv /etc/yum.repos.d/packages.microsoft.com_yumrepos_edge.repo /etc/yum.repos.d/microsoft-edge-stable.repo
dnf install -y microsoft-edge-stable
SCRIPT

script_xrdp = <<-SCRIPT
# Load the Hyper-V kernel module
if ! [ -f "/etc/modules-load.d/hv_sock.conf" ] || [ "$(cat /etc/modules-load.d/hv_sock.conf | grep hv_sock)" = ""  ]; then
  echo "hv_sock" | sudo tee -a /etc/modules-load.d/hv_sock.conf > /dev/null
fi
dnf -y install xrdp tigervnc-server
systemctl enable --now xrdp

firewall-cmd --add-port=3389/tcp
firewall-cmd --runtime-to-permanent
SCRIPT

# *VM provisioning
# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  config.trigger.before :up do |trigger|
    trigger.info = "Creating 'NATSwitch' Hyper-V switch if it does not exist..."
    trigger.run = {privileged: "true", powershell_elevated_interactive: "true", path: "./scripts/create_hyperv_natswitch.ps1", :args => [nat_net]}
  end
  config.trigger.before :reload do |trigger|
    trigger.info = "Setting Hyper-V switch to 'NATSwitch' to allow for static IP..."
    trigger.run = {privileged: "true", powershell_elevated_interactive: "true", path: "./scripts/set_hyperv_switch.ps1", :args => [vm_name]}
  end
  config.trigger.after :reload do |trigger|
    trigger.info = "Add vagrant configuration to ssh config file..."
    trigger.run = {privileged: "false", powershell_elevated_interactive: "false", path: "./scripts/set_ssh_config.ps1", :args => [ip_addr, hostname]}
  end

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = box
  config.vm.provider provider
  # timeout setup to overcome security tool related performance impact
  config.vm.boot_timeout = 600
  config.vm.graceful_halt_timeout = 600

  config.vm.hostname = hostname
  config.vm.network "public_network"
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.provision "file", source: "~/.ssh/id_rsa.pub", destination: "~/.ssh/authorized_keys"
  config.ssh.private_key_path = ["~/.ssh/id_rsa", "#{vagrant_home}/insecure_private_key"]
  config.ssh.insert_key = false

  config.vm.define vm_name do |node|
    node.vm.provider provider do |h|
      h.enable_virtualization_extensions = true
      h.linked_clone = true
      h.memory = memory
      h.maxmemory = memory
      h.cpus = cpu
      h.vmname = vm_name
    end
    # install packages
    node.vm.provision "shell", name: "upgrade system...", inline: script_upgrade_packages
    node.vm.provision "shell", name: "configure static ip", inline: script_configure_static_ip
    # reload with new IP
    node.vm.provision :reload
    # continue installing features
    node.vm.provision "shell", name: "install packages...", inline: script_install_packages
    node.vm.provision "shell", name: "set ulimits on systemd", inline: script_ulimits
    node.vm.provision "shell", name: "install oh-my-posh...", inline: script_omp
    node.vm.provision "shell", name: "install PowerShell...", inline: script_pwsh
    node.vm.provision "shell", name: "install yq", inline: script_yq
    node.vm.provision "shell", name: "install docker...", inline: script_docker
    node.vm.provision "shell", name: "install kubectl...", inline: script_kubectl
    node.vm.provision "shell", name: "install helm...", inline: script_helm, privileged: false
    node.vm.provision "shell", name: "install minikube...", inline: script_minikube
    node.vm.provision "shell", name: "install k3d...", inline: script_k3d
    node.vm.provision "shell", name: "install k9s...", inline: script_k9s
    node.vm.provision "shell", name: "install flux", inline: script_flux
    node.vm.provision "shell", name: "install smee", inline: script_smee
    node.vm.provision "shell", name: "install kubeseal", inline: script_kubeseal
    node.vm.provision "shell", name: "install kustomize", inline: script_kustomize
    node.vm.provision "shell", name: "install argo-rollouts cli", inline: script_argorolloutscli
    node.vm.provision "shell", name: "install PS modules...", inline: script_pwsh_modules
    node.vm.provision "shell", name: "set up user profile...", inline: script_user_profile, privileged: false
    # copy profile setup to vm
    node.vm.provision "file", source: ".config", destination: "/tmp/"
    node.vm.provision "shell", name: "set up global profile...", inline: script_global_profile_setup
    node.vm.provision "shell", name: "install Gnome...", inline: script_gnome
    node.vm.provision "shell", name: "set up Gnome...", inline: script_setup_gnome, privileged: false
    node.vm.provision "shell", name: "install xrdp...", inline: script_xrdp, reboot: true
  end

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # View the documentation for the provider you are using for more
  # information on available options.
end
