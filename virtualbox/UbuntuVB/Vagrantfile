# -*- mode: ruby -*-
# vi: set ft=ruby :

# *Variables
box        = "generic/ubuntu2204"
boxversion = "4.1.10"
provider   = "virtualbox"
vboxname   = "UbuntuVB"
# network configuration
ip_addr    = "192.168.56.61"
# vm configuration
memory     = 8192
cpu        = 2

# calculate variables
hostname = vboxname.downcase

# *Scripts
script_install_packages = <<-SCRIPT
apt-get update
apt-get install -y exa ripgrep nano vim jq
SCRIPT

script_configure_static_ip = <<-SCRIPT
grep "eth1:$" /etc/netplan/01-netcfg.yaml >/dev/null || cat <<"EOF" >>/etc/netplan/01-netcfg.yaml
    eth1:
      dhcp4: false
      dhcp6: false
      addresses: [#{ip_addr}/24]
EOF
netplan generate
SCRIPT

# *VM provisioning
Vagrant.configure("2") do |config|

  config.trigger.before :up do |trigger|
    trigger.info = "Cleaning up VirtualBox VM folder..."
    trigger.run = {privileged: "false", powershell_elevated_interactive: "false", path: "../../.assets/trigger/cleanup_vbox_vm.ps1", :args => [vboxname]}
  end
  # add ssh configuration after setting static IP on the machine
  config.trigger.after :reload do |trigger|
    trigger.info = "Add vagrant configuration to ssh config file..."
    trigger.run = {privileged: "false", powershell_elevated_interactive: "false", path: "../../.assets/trigger/set_ssh_config.ps1", :args => [ip_addr, hostname]}
  end

  # map local workstation folder
  config.vm.synced_folder ".", "/vagrant", type: "virtualbox"
  config.vm.provision "file", source: "~/.ssh/id_rsa.pub", destination: "~/.ssh/authorized_keys"
  config.ssh.private_key_path = ["~/.ssh/id_rsa", "~/.vagrant.d/insecure_private_key"]
  config.ssh.insert_key = false

  # timeout setup to overcome security tool related performance impact
  config.vm.boot_timeout = 600
  config.vm.graceful_halt_timeout = 600

  # box to be installed
  config.vm.box = box
  # config.vm.box_version = boxversion

  # check if guestadditions are already installed
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  config.vm.define vboxname do |node|
    # define server
    node.vm.provider provider do |vb|
      vb.name = vboxname
      vb.memory = memory
      vb.cpus = cpu
      vb.customize [
        "modifyvm", :id,
        "--cableconnected1", "on",
        "--graphicscontroller", "vmsvga",
        "--accelerate3d", "on"
      ]
    end

    # define network
    node.vm.hostname = hostname
    node.vm.network "private_network", ip: ip_addr, auto_config: false, hostname: true

    # the trigger definition
    node.trigger.after :up do |trigger|
      trigger.name = "set inotify settings"
      trigger.run_remote = {privileged: true, path: "../../.assets/trigger/set_inotify.sh"}
    end

    # install packages
    node.vm.provision "shell", name: "install packages...", inline: script_install_packages
    node.vm.provision "shell", name: "install Gnome...", path: "../../.assets/provision/install_gnome.sh"
    node.vm.provision "shell", name: "install Edge...", path: "../../.assets/provision/install_edge.sh"
    # # ~setting up profiles
    node.vm.provision "shell", name: "install oh-my-posh...", path: "../../.assets/provision/install_omp.sh"
    node.vm.provision "shell", name: "install PowerShell...", path: "../../.assets/provision/install_pwsh.sh"
    node.vm.provision "file", source: "../../.assets/config", destination: "/tmp/"
    node.vm.provision "shell", name: "set up PS for all users...", path: "../../.assets/provision/setup_profiles_allusers.sh"
    node.vm.provision "shell", name: "set up user profile...", path: "../../.assets/provision/setup_profiles_user.sh", privileged: false
    # # ~upgrade system
    node.vm.provision "shell", name: "upgrade system...", path: "../../.assets/provision/upgrade_system.sh"
    # ~set static ip and reload
    node.vm.provision "shell", name: "configure static ip", inline: script_configure_static_ip
    node.vm.provision :reload
  end
end
