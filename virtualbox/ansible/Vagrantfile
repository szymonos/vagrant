# -*- mode: ruby -*-
# vi: set ft=ruby :

# *Variables
provider = "virtualbox"
# vm configuration
memory   = 2048
cpu      = 2

# *VMs spec
vm_boxes = {
  "rhel" => {
    :name => "Ansible-RHEL",
    :ip => "192.168.33.11",
    :box => "generic/rhel8",
    :script => <<~SCRIPT
      dnf install -y bash-completion
    SCRIPT
  },
  "centos" => {
    :name => "Ansible-Centos",
    :ip => "192.168.33.12",
    :box => "generic/centos8s",
    :script => <<~SCRIPT
      dnf install -y ansible
    SCRIPT
  },
  "ubuntu" => {
    :name => "Ansible-Ubuntu",
    :ip => "192.168.33.13",
    :box => "generic/ubuntu2204",
    :script => <<~SCRIPT
      export DEBIAN_FRONTEND=noninteractive \\
        && apt-add-repository -y ppa:ansible/ansible \\
        && apt-get install -qy ansible
    SCRIPT
  }
}

# *Scripts
Vagrant.configure("2") do |config|
  # common config
  config.vm.provision "file", source: "~/.ssh/id_rsa.pub", destination: "~/.ssh/authorized_keys"
  config.ssh.private_key_path = ["~/.ssh/id_rsa", "~/.vagrant.d/insecure_private_key"]
  config.ssh.insert_key = false
  vm_boxes.each do |key, value|
    boxname = value[:name]
    ip_addr = value[:ip]
    config.vm.define key do |node|
      # node triggers
      node.trigger.after :reload do |trigger|
        trigger.info = "Add vagrant configuration to ssh config file..."
        trigger.run = {
          privileged: "false", powershell_elevated_interactive: "false",
          path: "../../.assets/trigger/set_ssh_config.ps1", :args => [ip_addr, boxname.downcase]
        }
      end
      # node setup
      node.vm.box = value[:box]
      node.vm.hostname = key
      node.vm.network "private_network", ip: ip_addr
      node.vm.provider provider do |vb|
        vb.name = boxname
        vb.memory = memory
        vb.cpus = cpu
        vb.customize [
          "modifyvm", :id,
          "--cableconnected1", "on",
          "--graphicscontroller", "vmsvga",
          "--accelerate3d", "on"
        ]
      end
      # node provision
      node.vm.provision "shell", name: "run inline script...", inline: value[:script]
      # ~reload vm
      node.vm.provision :reload
    end
  end
end
